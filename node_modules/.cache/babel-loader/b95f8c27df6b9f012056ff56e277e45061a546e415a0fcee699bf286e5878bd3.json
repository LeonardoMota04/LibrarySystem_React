{"ast":null,"code":"import { collection, doc, getDocs, getDoc, addDoc, updateDoc, deleteDoc, query, where, arrayUnion, arrayRemove, increment } from 'firebase/firestore';\nimport { db } from '../firebase/config';\n\n// Referência para a coleção de livros\nconst booksCollection = collection(db, 'books');\nconst GOOGLE_BOOKS_API_KEY = process.env.REACT_APP_GOOGLE_BOOKS_API_KEY;\nconst GOOGLE_BOOKS_API_URL = 'https://www.googleapis.com/books/v1/volumes';\nconsole.log(\"Chave da API do Google Books:\", GOOGLE_BOOKS_API_KEY ? \"Definida\" : \"Não definida\");\nexport const searchBooks = async searchTerm => {\n  try {\n    console.log(\"Iniciando pesquisa na API do Google Books:\", searchTerm);\n\n    // Codificar o termo de pesquisa para URL\n    const encodedSearchTerm = encodeURIComponent(searchTerm);\n    const url = `https://www.googleapis.com/books/v1/volumes?q=${encodedSearchTerm}&key=${GOOGLE_BOOKS_API_KEY}`;\n    console.log(\"URL da requisição:\", url);\n    const response = await fetch(url);\n    console.log(\"Resposta recebida:\", response.status);\n    if (!response.ok) {\n      throw new Error(`Erro na API: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log(\"Dados recebidos:\", data);\n    if (!data.items || data.items.length === 0) {\n      console.log(\"Nenhum resultado encontrado\");\n      return [];\n    }\n    const results = data.items.map(item => {\n      var _item$volumeInfo$imag;\n      return {\n        id: item.id,\n        title: item.volumeInfo.title,\n        author: item.volumeInfo.authors ? item.volumeInfo.authors[0] : 'Autor desconhecido',\n        description: item.volumeInfo.description || 'Sem descrição disponível',\n        imageUrl: ((_item$volumeInfo$imag = item.volumeInfo.imageLinks) === null || _item$volumeInfo$imag === void 0 ? void 0 : _item$volumeInfo$imag.thumbnail) || 'https://via.placeholder.com/150',\n        publisher: item.volumeInfo.publisher || 'Editora desconhecida',\n        publishedDate: item.volumeInfo.publishedDate || 'Data desconhecida',\n        pageCount: item.volumeInfo.pageCount || 0,\n        categories: item.volumeInfo.categories || [],\n        language: item.volumeInfo.language || 'pt'\n      };\n    });\n    console.log(\"Resultados processados:\", results);\n    return results;\n  } catch (error) {\n    console.error('Erro ao buscar livros:', error);\n    throw error;\n  }\n};\n\n// Buscar todos os livros\nexport async function getBooks() {\n  try {\n    const querySnapshot = await getDocs(booksCollection);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Erro ao buscar livros:', error);\n    throw error;\n  }\n}\n\n// Buscar um livro específico\nexport async function getBook(bookId) {\n  try {\n    const bookDoc = await getDoc(doc(db, 'books', bookId));\n    if (bookDoc.exists()) {\n      return {\n        id: bookDoc.id,\n        ...bookDoc.data()\n      };\n    } else {\n      throw new Error('Livro não encontrado');\n    }\n  } catch (error) {\n    console.error('Erro ao buscar livro:', error);\n    throw error;\n  }\n}\n\n// Adicionar um novo livro\nexport const addBook = async book => {\n  try {\n    console.log(\"Adicionando livro ao Firestore:\", book);\n    const booksRef = collection(db, 'books');\n\n    // Adicionar campos adicionais\n    const bookData = {\n      ...book,\n      createdAt: new Date().toISOString(),\n      favoritesCount: 0,\n      favoritedBy: []\n    };\n    const docRef = await addDoc(booksRef, bookData);\n    console.log(\"Livro adicionado com ID:\", docRef.id);\n    return docRef.id;\n  } catch (error) {\n    console.error('Erro ao adicionar livro:', error);\n    throw error;\n  }\n};\n\n// Atualizar um livro existente\nexport async function updateBook(bookId, bookData) {\n  try {\n    const bookRef = doc(db, 'books', bookId);\n    await updateDoc(bookRef, {\n      ...bookData,\n      updatedAt: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Erro ao atualizar livro:', error);\n    throw error;\n  }\n}\n\n// Excluir um livro\nexport async function deleteBook(bookId) {\n  try {\n    await deleteDoc(doc(db, 'books', bookId));\n  } catch (error) {\n    console.error('Erro ao excluir livro:', error);\n    throw error;\n  }\n}\n\n// Adicionar um livro aos favoritos\nexport async function addToFavorites(bookId, userId) {\n  try {\n    const bookRef = doc(db, 'books', bookId);\n    await updateDoc(bookRef, {\n      favoritedBy: arrayUnion(userId),\n      favoritesCount: increment(1)\n    });\n  } catch (error) {\n    console.error('Erro ao adicionar aos favoritos:', error);\n    throw error;\n  }\n}\n\n// Remover um livro dos favoritos\nexport async function removeFromFavorites(bookId, userId) {\n  try {\n    const bookRef = doc(db, 'books', bookId);\n    await updateDoc(bookRef, {\n      favoritedBy: arrayRemove(userId),\n      favoritesCount: increment(-1)\n    });\n  } catch (error) {\n    console.error('Erro ao remover dos favoritos:', error);\n    throw error;\n  }\n}\n\n// Verificar se um livro está nos favoritos do usuário\nexport async function isBookFavorited(bookId, userId) {\n  try {\n    const bookDoc = await getDoc(doc(db, 'books', bookId));\n    if (bookDoc.exists()) {\n      const bookData = bookDoc.data();\n      return bookData.favoritedBy && bookData.favoritedBy.includes(userId);\n    }\n    return false;\n  } catch (error) {\n    console.error('Erro ao verificar favoritos:', error);\n    throw error;\n  }\n}\n\n// Buscar livros favoritos do usuário\nexport async function getUserFavorites(userId) {\n  try {\n    const q = query(booksCollection, where('favoritedBy', 'array-contains', userId));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Erro ao buscar favoritos do usuário:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["collection","doc","getDocs","getDoc","addDoc","updateDoc","deleteDoc","query","where","arrayUnion","arrayRemove","increment","db","booksCollection","GOOGLE_BOOKS_API_KEY","process","env","REACT_APP_GOOGLE_BOOKS_API_KEY","GOOGLE_BOOKS_API_URL","console","log","searchBooks","searchTerm","encodedSearchTerm","encodeURIComponent","url","response","fetch","status","ok","Error","statusText","data","json","items","length","results","map","item","_item$volumeInfo$imag","id","title","volumeInfo","author","authors","description","imageUrl","imageLinks","thumbnail","publisher","publishedDate","pageCount","categories","language","error","getBooks","querySnapshot","docs","getBook","bookId","bookDoc","exists","addBook","book","booksRef","bookData","createdAt","Date","toISOString","favoritesCount","favoritedBy","docRef","updateBook","bookRef","updatedAt","deleteBook","addToFavorites","userId","removeFromFavorites","isBookFavorited","includes","getUserFavorites","q"],"sources":["/Users/leonardomota/Desktop/testeDeSoftware/library-system-react/src/services/bookService.js"],"sourcesContent":["import { \n  collection, \n  doc, \n  getDocs, \n  getDoc, \n  addDoc, \n  updateDoc, \n  deleteDoc, \n  query, \n  where, \n  arrayUnion, \n  arrayRemove,\n  increment\n} from 'firebase/firestore';\nimport { db } from '../firebase/config';\n\n// Referência para a coleção de livros\nconst booksCollection = collection(db, 'books');\n\nconst GOOGLE_BOOKS_API_KEY = process.env.REACT_APP_GOOGLE_BOOKS_API_KEY;\nconst GOOGLE_BOOKS_API_URL = 'https://www.googleapis.com/books/v1/volumes';\n\nconsole.log(\"Chave da API do Google Books:\", GOOGLE_BOOKS_API_KEY ? \"Definida\" : \"Não definida\");\n\nexport const searchBooks = async (searchTerm) => {\n  try {\n    console.log(\"Iniciando pesquisa na API do Google Books:\", searchTerm);\n    \n    // Codificar o termo de pesquisa para URL\n    const encodedSearchTerm = encodeURIComponent(searchTerm);\n    const url = `https://www.googleapis.com/books/v1/volumes?q=${encodedSearchTerm}&key=${GOOGLE_BOOKS_API_KEY}`;\n    \n    console.log(\"URL da requisição:\", url);\n    \n    const response = await fetch(url);\n    console.log(\"Resposta recebida:\", response.status);\n    \n    if (!response.ok) {\n      throw new Error(`Erro na API: ${response.status} ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    console.log(\"Dados recebidos:\", data);\n    \n    if (!data.items || data.items.length === 0) {\n      console.log(\"Nenhum resultado encontrado\");\n      return [];\n    }\n\n    const results = data.items.map(item => ({\n      id: item.id,\n      title: item.volumeInfo.title,\n      author: item.volumeInfo.authors ? item.volumeInfo.authors[0] : 'Autor desconhecido',\n      description: item.volumeInfo.description || 'Sem descrição disponível',\n      imageUrl: item.volumeInfo.imageLinks?.thumbnail || 'https://via.placeholder.com/150',\n      publisher: item.volumeInfo.publisher || 'Editora desconhecida',\n      publishedDate: item.volumeInfo.publishedDate || 'Data desconhecida',\n      pageCount: item.volumeInfo.pageCount || 0,\n      categories: item.volumeInfo.categories || [],\n      language: item.volumeInfo.language || 'pt'\n    }));\n    \n    console.log(\"Resultados processados:\", results);\n    return results;\n  } catch (error) {\n    console.error('Erro ao buscar livros:', error);\n    throw error;\n  }\n};\n\n// Buscar todos os livros\nexport async function getBooks() {\n  try {\n    const querySnapshot = await getDocs(booksCollection);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Erro ao buscar livros:', error);\n    throw error;\n  }\n}\n\n// Buscar um livro específico\nexport async function getBook(bookId) {\n  try {\n    const bookDoc = await getDoc(doc(db, 'books', bookId));\n    if (bookDoc.exists()) {\n      return {\n        id: bookDoc.id,\n        ...bookDoc.data()\n      };\n    } else {\n      throw new Error('Livro não encontrado');\n    }\n  } catch (error) {\n    console.error('Erro ao buscar livro:', error);\n    throw error;\n  }\n}\n\n// Adicionar um novo livro\nexport const addBook = async (book) => {\n  try {\n    console.log(\"Adicionando livro ao Firestore:\", book);\n    const booksRef = collection(db, 'books');\n    \n    // Adicionar campos adicionais\n    const bookData = {\n      ...book,\n      createdAt: new Date().toISOString(),\n      favoritesCount: 0,\n      favoritedBy: []\n    };\n    \n    const docRef = await addDoc(booksRef, bookData);\n    console.log(\"Livro adicionado com ID:\", docRef.id);\n    \n    return docRef.id;\n  } catch (error) {\n    console.error('Erro ao adicionar livro:', error);\n    throw error;\n  }\n};\n\n// Atualizar um livro existente\nexport async function updateBook(bookId, bookData) {\n  try {\n    const bookRef = doc(db, 'books', bookId);\n    await updateDoc(bookRef, {\n      ...bookData,\n      updatedAt: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Erro ao atualizar livro:', error);\n    throw error;\n  }\n}\n\n// Excluir um livro\nexport async function deleteBook(bookId) {\n  try {\n    await deleteDoc(doc(db, 'books', bookId));\n  } catch (error) {\n    console.error('Erro ao excluir livro:', error);\n    throw error;\n  }\n}\n\n// Adicionar um livro aos favoritos\nexport async function addToFavorites(bookId, userId) {\n  try {\n    const bookRef = doc(db, 'books', bookId);\n    await updateDoc(bookRef, {\n      favoritedBy: arrayUnion(userId),\n      favoritesCount: increment(1)\n    });\n  } catch (error) {\n    console.error('Erro ao adicionar aos favoritos:', error);\n    throw error;\n  }\n}\n\n// Remover um livro dos favoritos\nexport async function removeFromFavorites(bookId, userId) {\n  try {\n    const bookRef = doc(db, 'books', bookId);\n    await updateDoc(bookRef, {\n      favoritedBy: arrayRemove(userId),\n      favoritesCount: increment(-1)\n    });\n  } catch (error) {\n    console.error('Erro ao remover dos favoritos:', error);\n    throw error;\n  }\n}\n\n// Verificar se um livro está nos favoritos do usuário\nexport async function isBookFavorited(bookId, userId) {\n  try {\n    const bookDoc = await getDoc(doc(db, 'books', bookId));\n    if (bookDoc.exists()) {\n      const bookData = bookDoc.data();\n      return bookData.favoritedBy && bookData.favoritedBy.includes(userId);\n    }\n    return false;\n  } catch (error) {\n    console.error('Erro ao verificar favoritos:', error);\n    throw error;\n  }\n}\n\n// Buscar livros favoritos do usuário\nexport async function getUserFavorites(userId) {\n  try {\n    const q = query(booksCollection, where('favoritedBy', 'array-contains', userId));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Erro ao buscar favoritos do usuário:', error);\n    throw error;\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}