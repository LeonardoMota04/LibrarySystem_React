{"ast":null,"code":"import axios from 'axios';\nconst API_KEY = 'SUA_CHAVE_API_AQUI'; // Substitua pela sua chave da API do Google Books\nconst BASE_URL = 'https://www.googleapis.com/books/v1';\nexport const googleBooksService = {\n  // Buscar livros por termo de pesquisa\n  searchBooks: async (query, options = {}) => {\n    try {\n      const params = {\n        q: query,\n        key: API_KEY,\n        maxResults: options.maxResults || 10,\n        startIndex: options.startIndex || 0,\n        langRestrict: options.langRestrict || 'pt',\n        printType: options.printType || 'all',\n        orderBy: options.orderBy || 'relevance',\n        filter: options.filter || '',\n        projection: options.projection || 'full'\n      };\n      const response = await axios.get(`${BASE_URL}/volumes`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar livros:', error);\n      throw error;\n    }\n  },\n  // Buscar livro por ID\n  getBookById: async volumeId => {\n    try {\n      const response = await axios.get(`${BASE_URL}/volumes/${volumeId}`, {\n        params: {\n          key: API_KEY\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar livro:', error);\n      throw error;\n    }\n  },\n  // Buscar livros por autor\n  searchBooksByAuthor: async (author, options = {}) => {\n    return googleBooksService.searchBooks(`inauthor:${author}`, options);\n  },\n  // Buscar livros por título\n  searchBooksByTitle: async (title, options = {}) => {\n    return googleBooksService.searchBooks(`intitle:${title}`, options);\n  },\n  // Buscar livros por ISBN\n  searchBooksByISBN: async (isbn, options = {}) => {\n    return googleBooksService.searchBooks(`isbn:${isbn}`, options);\n  }\n};","map":{"version":3,"names":["axios","API_KEY","BASE_URL","googleBooksService","searchBooks","query","options","params","q","key","maxResults","startIndex","langRestrict","printType","orderBy","filter","projection","response","get","data","error","console","getBookById","volumeId","searchBooksByAuthor","author","searchBooksByTitle","title","searchBooksByISBN","isbn"],"sources":["/Users/leonardomota/Desktop/testeDeSoftware/library-system-react/src/services/googleBooksService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'SUA_CHAVE_API_AQUI'; // Substitua pela sua chave da API do Google Books\nconst BASE_URL = 'https://www.googleapis.com/books/v1';\n\nexport const googleBooksService = {\n  // Buscar livros por termo de pesquisa\n  searchBooks: async (query, options = {}) => {\n    try {\n      const params = {\n        q: query,\n        key: API_KEY,\n        maxResults: options.maxResults || 10,\n        startIndex: options.startIndex || 0,\n        langRestrict: options.langRestrict || 'pt',\n        printType: options.printType || 'all',\n        orderBy: options.orderBy || 'relevance',\n        filter: options.filter || '',\n        projection: options.projection || 'full'\n      };\n\n      const response = await axios.get(`${BASE_URL}/volumes`, { params });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar livros:', error);\n      throw error;\n    }\n  },\n\n  // Buscar livro por ID\n  getBookById: async (volumeId) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/volumes/${volumeId}`, {\n        params: { key: API_KEY }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao buscar livro:', error);\n      throw error;\n    }\n  },\n\n  // Buscar livros por autor\n  searchBooksByAuthor: async (author, options = {}) => {\n    return googleBooksService.searchBooks(`inauthor:${author}`, options);\n  },\n\n  // Buscar livros por título\n  searchBooksByTitle: async (title, options = {}) => {\n    return googleBooksService.searchBooks(`intitle:${title}`, options);\n  },\n\n  // Buscar livros por ISBN\n  searchBooksByISBN: async (isbn, options = {}) => {\n    return googleBooksService.searchBooks(`isbn:${isbn}`, options);\n  }\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,oBAAoB,CAAC,CAAC;AACtC,MAAMC,QAAQ,GAAG,qCAAqC;AAEtD,OAAO,MAAMC,kBAAkB,GAAG;EAChC;EACAC,WAAW,EAAE,MAAAA,CAAOC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IAC1C,IAAI;MACF,MAAMC,MAAM,GAAG;QACbC,CAAC,EAAEH,KAAK;QACRI,GAAG,EAAER,OAAO;QACZS,UAAU,EAAEJ,OAAO,CAACI,UAAU,IAAI,EAAE;QACpCC,UAAU,EAAEL,OAAO,CAACK,UAAU,IAAI,CAAC;QACnCC,YAAY,EAAEN,OAAO,CAACM,YAAY,IAAI,IAAI;QAC1CC,SAAS,EAAEP,OAAO,CAACO,SAAS,IAAI,KAAK;QACrCC,OAAO,EAAER,OAAO,CAACQ,OAAO,IAAI,WAAW;QACvCC,MAAM,EAAET,OAAO,CAACS,MAAM,IAAI,EAAE;QAC5BC,UAAU,EAAEV,OAAO,CAACU,UAAU,IAAI;MACpC,CAAC;MAED,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,GAAGhB,QAAQ,UAAU,EAAE;QAAEK;MAAO,CAAC,CAAC;MACnE,OAAOU,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAE,WAAW,EAAE,MAAOC,QAAQ,IAAK;IAC/B,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,GAAGhB,QAAQ,YAAYqB,QAAQ,EAAE,EAAE;QAClEhB,MAAM,EAAE;UAAEE,GAAG,EAAER;QAAQ;MACzB,CAAC,CAAC;MACF,OAAOgB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAI,mBAAmB,EAAE,MAAAA,CAAOC,MAAM,EAAEnB,OAAO,GAAG,CAAC,CAAC,KAAK;IACnD,OAAOH,kBAAkB,CAACC,WAAW,CAAC,YAAYqB,MAAM,EAAE,EAAEnB,OAAO,CAAC;EACtE,CAAC;EAED;EACAoB,kBAAkB,EAAE,MAAAA,CAAOC,KAAK,EAAErB,OAAO,GAAG,CAAC,CAAC,KAAK;IACjD,OAAOH,kBAAkB,CAACC,WAAW,CAAC,WAAWuB,KAAK,EAAE,EAAErB,OAAO,CAAC;EACpE,CAAC;EAED;EACAsB,iBAAiB,EAAE,MAAAA,CAAOC,IAAI,EAAEvB,OAAO,GAAG,CAAC,CAAC,KAAK;IAC/C,OAAOH,kBAAkB,CAACC,WAAW,CAAC,QAAQyB,IAAI,EAAE,EAAEvB,OAAO,CAAC;EAChE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}