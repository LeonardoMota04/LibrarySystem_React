{"ast":null,"code":"import { collection, doc, getDocs, getDoc, addDoc, updateDoc, deleteDoc, query, where, arrayUnion, arrayRemove, increment } from 'firebase/firestore';\nimport { db } from '../firebase/config';\n\n// Referência para a coleção de livros\nconst booksCollection = collection(db, 'books');\n\n// Buscar todos os livros\nexport async function getBooks() {\n  try {\n    const querySnapshot = await getDocs(booksCollection);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Erro ao buscar livros:', error);\n    throw error;\n  }\n}\n\n// Buscar um livro específico\nexport async function getBook(bookId) {\n  try {\n    const bookDoc = await getDoc(doc(db, 'books', bookId));\n    if (bookDoc.exists()) {\n      return {\n        id: bookDoc.id,\n        ...bookDoc.data()\n      };\n    } else {\n      throw new Error('Livro não encontrado');\n    }\n  } catch (error) {\n    console.error('Erro ao buscar livro:', error);\n    throw error;\n  }\n}\n\n// Adicionar um novo livro\nexport async function addBook(bookData) {\n  try {\n    const docRef = await addDoc(booksCollection, {\n      ...bookData,\n      favoritesCount: 0,\n      favoritedBy: [],\n      createdAt: new Date().toISOString()\n    });\n    return docRef.id;\n  } catch (error) {\n    console.error('Erro ao adicionar livro:', error);\n    throw error;\n  }\n}\n\n// Atualizar um livro existente\nexport async function updateBook(bookId, bookData) {\n  try {\n    const bookRef = doc(db, 'books', bookId);\n    await updateDoc(bookRef, {\n      ...bookData,\n      updatedAt: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Erro ao atualizar livro:', error);\n    throw error;\n  }\n}\n\n// Excluir um livro\nexport async function deleteBook(bookId) {\n  try {\n    await deleteDoc(doc(db, 'books', bookId));\n  } catch (error) {\n    console.error('Erro ao excluir livro:', error);\n    throw error;\n  }\n}\n\n// Adicionar um livro aos favoritos\nexport async function addToFavorites(bookId, userId) {\n  try {\n    const bookRef = doc(db, 'books', bookId);\n    await updateDoc(bookRef, {\n      favoritedBy: arrayUnion(userId),\n      favoritesCount: increment(1)\n    });\n  } catch (error) {\n    console.error('Erro ao adicionar aos favoritos:', error);\n    throw error;\n  }\n}\n\n// Remover um livro dos favoritos\nexport async function removeFromFavorites(bookId, userId) {\n  try {\n    const bookRef = doc(db, 'books', bookId);\n    await updateDoc(bookRef, {\n      favoritedBy: arrayRemove(userId),\n      favoritesCount: increment(-1)\n    });\n  } catch (error) {\n    console.error('Erro ao remover dos favoritos:', error);\n    throw error;\n  }\n}\n\n// Verificar se um livro está nos favoritos do usuário\nexport async function isBookFavorited(bookId, userId) {\n  try {\n    const bookDoc = await getDoc(doc(db, 'books', bookId));\n    if (bookDoc.exists()) {\n      const bookData = bookDoc.data();\n      return bookData.favoritedBy && bookData.favoritedBy.includes(userId);\n    }\n    return false;\n  } catch (error) {\n    console.error('Erro ao verificar favoritos:', error);\n    throw error;\n  }\n}\n\n// Buscar livros favoritos do usuário\nexport async function getUserFavorites(userId) {\n  try {\n    const q = query(booksCollection, where('favoritedBy', 'array-contains', userId));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Erro ao buscar favoritos do usuário:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["collection","doc","getDocs","getDoc","addDoc","updateDoc","deleteDoc","query","where","arrayUnion","arrayRemove","increment","db","booksCollection","getBooks","querySnapshot","docs","map","id","data","error","console","getBook","bookId","bookDoc","exists","Error","addBook","bookData","docRef","favoritesCount","favoritedBy","createdAt","Date","toISOString","updateBook","bookRef","updatedAt","deleteBook","addToFavorites","userId","removeFromFavorites","isBookFavorited","includes","getUserFavorites","q"],"sources":["/Users/leonardomota/Desktop/testeDeSoftware/library-system-react/src/services/bookService.js"],"sourcesContent":["import { \n  collection, \n  doc, \n  getDocs, \n  getDoc, \n  addDoc, \n  updateDoc, \n  deleteDoc, \n  query, \n  where, \n  arrayUnion, \n  arrayRemove,\n  increment\n} from 'firebase/firestore';\nimport { db } from '../firebase/config';\n\n// Referência para a coleção de livros\nconst booksCollection = collection(db, 'books');\n\n// Buscar todos os livros\nexport async function getBooks() {\n  try {\n    const querySnapshot = await getDocs(booksCollection);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Erro ao buscar livros:', error);\n    throw error;\n  }\n}\n\n// Buscar um livro específico\nexport async function getBook(bookId) {\n  try {\n    const bookDoc = await getDoc(doc(db, 'books', bookId));\n    if (bookDoc.exists()) {\n      return {\n        id: bookDoc.id,\n        ...bookDoc.data()\n      };\n    } else {\n      throw new Error('Livro não encontrado');\n    }\n  } catch (error) {\n    console.error('Erro ao buscar livro:', error);\n    throw error;\n  }\n}\n\n// Adicionar um novo livro\nexport async function addBook(bookData) {\n  try {\n    const docRef = await addDoc(booksCollection, {\n      ...bookData,\n      favoritesCount: 0,\n      favoritedBy: [],\n      createdAt: new Date().toISOString()\n    });\n    return docRef.id;\n  } catch (error) {\n    console.error('Erro ao adicionar livro:', error);\n    throw error;\n  }\n}\n\n// Atualizar um livro existente\nexport async function updateBook(bookId, bookData) {\n  try {\n    const bookRef = doc(db, 'books', bookId);\n    await updateDoc(bookRef, {\n      ...bookData,\n      updatedAt: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Erro ao atualizar livro:', error);\n    throw error;\n  }\n}\n\n// Excluir um livro\nexport async function deleteBook(bookId) {\n  try {\n    await deleteDoc(doc(db, 'books', bookId));\n  } catch (error) {\n    console.error('Erro ao excluir livro:', error);\n    throw error;\n  }\n}\n\n// Adicionar um livro aos favoritos\nexport async function addToFavorites(bookId, userId) {\n  try {\n    const bookRef = doc(db, 'books', bookId);\n    await updateDoc(bookRef, {\n      favoritedBy: arrayUnion(userId),\n      favoritesCount: increment(1)\n    });\n  } catch (error) {\n    console.error('Erro ao adicionar aos favoritos:', error);\n    throw error;\n  }\n}\n\n// Remover um livro dos favoritos\nexport async function removeFromFavorites(bookId, userId) {\n  try {\n    const bookRef = doc(db, 'books', bookId);\n    await updateDoc(bookRef, {\n      favoritedBy: arrayRemove(userId),\n      favoritesCount: increment(-1)\n    });\n  } catch (error) {\n    console.error('Erro ao remover dos favoritos:', error);\n    throw error;\n  }\n}\n\n// Verificar se um livro está nos favoritos do usuário\nexport async function isBookFavorited(bookId, userId) {\n  try {\n    const bookDoc = await getDoc(doc(db, 'books', bookId));\n    if (bookDoc.exists()) {\n      const bookData = bookDoc.data();\n      return bookData.favoritedBy && bookData.favoritedBy.includes(userId);\n    }\n    return false;\n  } catch (error) {\n    console.error('Erro ao verificar favoritos:', error);\n    throw error;\n  }\n}\n\n// Buscar livros favoritos do usuário\nexport async function getUserFavorites(userId) {\n  try {\n    const q = query(booksCollection, where('favoritedBy', 'array-contains', userId));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Erro ao buscar favoritos do usuário:', error);\n    throw error;\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}