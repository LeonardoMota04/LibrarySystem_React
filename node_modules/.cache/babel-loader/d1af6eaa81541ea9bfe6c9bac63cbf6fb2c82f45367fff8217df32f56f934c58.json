{"ast":null,"code":"import { collection, doc, getDocs, getDoc, addDoc, updateDoc, deleteDoc, query, where, arrayUnion, arrayRemove, increment } from 'firebase/firestore';\nimport { db } from '../firebase/config';\n\n// Referência para a coleção de livros\nconst booksCollection = collection(db, 'books');\nconst GOOGLE_BOOKS_API_KEY = process.env.REACT_APP_GOOGLE_BOOKS_API_KEY;\nconst GOOGLE_BOOKS_API_URL = 'https://www.googleapis.com/books/v1/volumes';\nexport const searchBooks = async searchTerm => {\n  try {\n    const response = await fetch(`${GOOGLE_BOOKS_API_URL}?q=${searchTerm}&key=${GOOGLE_BOOKS_API_KEY}`);\n    const data = await response.json();\n    if (!data.items) {\n      return [];\n    }\n    return data.items.map(item => {\n      var _item$volumeInfo$imag;\n      return {\n        id: item.id,\n        title: item.volumeInfo.title,\n        author: item.volumeInfo.authors ? item.volumeInfo.authors[0] : 'Autor desconhecido',\n        description: item.volumeInfo.description || 'Sem descrição disponível',\n        imageUrl: ((_item$volumeInfo$imag = item.volumeInfo.imageLinks) === null || _item$volumeInfo$imag === void 0 ? void 0 : _item$volumeInfo$imag.thumbnail) || 'https://via.placeholder.com/150',\n        publisher: item.volumeInfo.publisher || 'Editora desconhecida',\n        publishedDate: item.volumeInfo.publishedDate || 'Data desconhecida',\n        pageCount: item.volumeInfo.pageCount || 0,\n        categories: item.volumeInfo.categories || [],\n        language: item.volumeInfo.language || 'pt'\n      };\n    });\n  } catch (error) {\n    console.error('Erro ao buscar livros:', error);\n    throw error;\n  }\n};\n\n// Buscar todos os livros\nexport async function getBooks() {\n  try {\n    const querySnapshot = await getDocs(booksCollection);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Erro ao buscar livros:', error);\n    throw error;\n  }\n}\n\n// Buscar um livro específico\nexport async function getBook(bookId) {\n  try {\n    const bookDoc = await getDoc(doc(db, 'books', bookId));\n    if (bookDoc.exists()) {\n      return {\n        id: bookDoc.id,\n        ...bookDoc.data()\n      };\n    } else {\n      throw new Error('Livro não encontrado');\n    }\n  } catch (error) {\n    console.error('Erro ao buscar livro:', error);\n    throw error;\n  }\n}\n\n// Adicionar um novo livro\nexport async function addBook(bookData) {\n  try {\n    const docRef = await addDoc(booksCollection, {\n      ...bookData,\n      favoritesCount: 0,\n      favoritedBy: [],\n      createdAt: new Date().toISOString()\n    });\n    return docRef.id;\n  } catch (error) {\n    console.error('Erro ao adicionar livro:', error);\n    throw error;\n  }\n}\n\n// Atualizar um livro existente\nexport async function updateBook(bookId, bookData) {\n  try {\n    const bookRef = doc(db, 'books', bookId);\n    await updateDoc(bookRef, {\n      ...bookData,\n      updatedAt: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Erro ao atualizar livro:', error);\n    throw error;\n  }\n}\n\n// Excluir um livro\nexport async function deleteBook(bookId) {\n  try {\n    await deleteDoc(doc(db, 'books', bookId));\n  } catch (error) {\n    console.error('Erro ao excluir livro:', error);\n    throw error;\n  }\n}\n\n// Adicionar um livro aos favoritos\nexport async function addToFavorites(bookId, userId) {\n  try {\n    const bookRef = doc(db, 'books', bookId);\n    await updateDoc(bookRef, {\n      favoritedBy: arrayUnion(userId),\n      favoritesCount: increment(1)\n    });\n  } catch (error) {\n    console.error('Erro ao adicionar aos favoritos:', error);\n    throw error;\n  }\n}\n\n// Remover um livro dos favoritos\nexport async function removeFromFavorites(bookId, userId) {\n  try {\n    const bookRef = doc(db, 'books', bookId);\n    await updateDoc(bookRef, {\n      favoritedBy: arrayRemove(userId),\n      favoritesCount: increment(-1)\n    });\n  } catch (error) {\n    console.error('Erro ao remover dos favoritos:', error);\n    throw error;\n  }\n}\n\n// Verificar se um livro está nos favoritos do usuário\nexport async function isBookFavorited(bookId, userId) {\n  try {\n    const bookDoc = await getDoc(doc(db, 'books', bookId));\n    if (bookDoc.exists()) {\n      const bookData = bookDoc.data();\n      return bookData.favoritedBy && bookData.favoritedBy.includes(userId);\n    }\n    return false;\n  } catch (error) {\n    console.error('Erro ao verificar favoritos:', error);\n    throw error;\n  }\n}\n\n// Buscar livros favoritos do usuário\nexport async function getUserFavorites(userId) {\n  try {\n    const q = query(booksCollection, where('favoritedBy', 'array-contains', userId));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Erro ao buscar favoritos do usuário:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["collection","doc","getDocs","getDoc","addDoc","updateDoc","deleteDoc","query","where","arrayUnion","arrayRemove","increment","db","booksCollection","GOOGLE_BOOKS_API_KEY","process","env","REACT_APP_GOOGLE_BOOKS_API_KEY","GOOGLE_BOOKS_API_URL","searchBooks","searchTerm","response","fetch","data","json","items","map","item","_item$volumeInfo$imag","id","title","volumeInfo","author","authors","description","imageUrl","imageLinks","thumbnail","publisher","publishedDate","pageCount","categories","language","error","console","getBooks","querySnapshot","docs","getBook","bookId","bookDoc","exists","Error","addBook","bookData","docRef","favoritesCount","favoritedBy","createdAt","Date","toISOString","updateBook","bookRef","updatedAt","deleteBook","addToFavorites","userId","removeFromFavorites","isBookFavorited","includes","getUserFavorites","q"],"sources":["/Users/leonardomota/Desktop/testeDeSoftware/library-system-react/src/services/bookService.js"],"sourcesContent":["import { \n  collection, \n  doc, \n  getDocs, \n  getDoc, \n  addDoc, \n  updateDoc, \n  deleteDoc, \n  query, \n  where, \n  arrayUnion, \n  arrayRemove,\n  increment\n} from 'firebase/firestore';\nimport { db } from '../firebase/config';\n\n// Referência para a coleção de livros\nconst booksCollection = collection(db, 'books');\n\nconst GOOGLE_BOOKS_API_KEY = process.env.REACT_APP_GOOGLE_BOOKS_API_KEY;\nconst GOOGLE_BOOKS_API_URL = 'https://www.googleapis.com/books/v1/volumes';\n\nexport const searchBooks = async (searchTerm) => {\n  try {\n    const response = await fetch(`${GOOGLE_BOOKS_API_URL}?q=${searchTerm}&key=${GOOGLE_BOOKS_API_KEY}`);\n    const data = await response.json();\n    \n    if (!data.items) {\n      return [];\n    }\n\n    return data.items.map(item => ({\n      id: item.id,\n      title: item.volumeInfo.title,\n      author: item.volumeInfo.authors ? item.volumeInfo.authors[0] : 'Autor desconhecido',\n      description: item.volumeInfo.description || 'Sem descrição disponível',\n      imageUrl: item.volumeInfo.imageLinks?.thumbnail || 'https://via.placeholder.com/150',\n      publisher: item.volumeInfo.publisher || 'Editora desconhecida',\n      publishedDate: item.volumeInfo.publishedDate || 'Data desconhecida',\n      pageCount: item.volumeInfo.pageCount || 0,\n      categories: item.volumeInfo.categories || [],\n      language: item.volumeInfo.language || 'pt'\n    }));\n  } catch (error) {\n    console.error('Erro ao buscar livros:', error);\n    throw error;\n  }\n};\n\n// Buscar todos os livros\nexport async function getBooks() {\n  try {\n    const querySnapshot = await getDocs(booksCollection);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Erro ao buscar livros:', error);\n    throw error;\n  }\n}\n\n// Buscar um livro específico\nexport async function getBook(bookId) {\n  try {\n    const bookDoc = await getDoc(doc(db, 'books', bookId));\n    if (bookDoc.exists()) {\n      return {\n        id: bookDoc.id,\n        ...bookDoc.data()\n      };\n    } else {\n      throw new Error('Livro não encontrado');\n    }\n  } catch (error) {\n    console.error('Erro ao buscar livro:', error);\n    throw error;\n  }\n}\n\n// Adicionar um novo livro\nexport async function addBook(bookData) {\n  try {\n    const docRef = await addDoc(booksCollection, {\n      ...bookData,\n      favoritesCount: 0,\n      favoritedBy: [],\n      createdAt: new Date().toISOString()\n    });\n    return docRef.id;\n  } catch (error) {\n    console.error('Erro ao adicionar livro:', error);\n    throw error;\n  }\n}\n\n// Atualizar um livro existente\nexport async function updateBook(bookId, bookData) {\n  try {\n    const bookRef = doc(db, 'books', bookId);\n    await updateDoc(bookRef, {\n      ...bookData,\n      updatedAt: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Erro ao atualizar livro:', error);\n    throw error;\n  }\n}\n\n// Excluir um livro\nexport async function deleteBook(bookId) {\n  try {\n    await deleteDoc(doc(db, 'books', bookId));\n  } catch (error) {\n    console.error('Erro ao excluir livro:', error);\n    throw error;\n  }\n}\n\n// Adicionar um livro aos favoritos\nexport async function addToFavorites(bookId, userId) {\n  try {\n    const bookRef = doc(db, 'books', bookId);\n    await updateDoc(bookRef, {\n      favoritedBy: arrayUnion(userId),\n      favoritesCount: increment(1)\n    });\n  } catch (error) {\n    console.error('Erro ao adicionar aos favoritos:', error);\n    throw error;\n  }\n}\n\n// Remover um livro dos favoritos\nexport async function removeFromFavorites(bookId, userId) {\n  try {\n    const bookRef = doc(db, 'books', bookId);\n    await updateDoc(bookRef, {\n      favoritedBy: arrayRemove(userId),\n      favoritesCount: increment(-1)\n    });\n  } catch (error) {\n    console.error('Erro ao remover dos favoritos:', error);\n    throw error;\n  }\n}\n\n// Verificar se um livro está nos favoritos do usuário\nexport async function isBookFavorited(bookId, userId) {\n  try {\n    const bookDoc = await getDoc(doc(db, 'books', bookId));\n    if (bookDoc.exists()) {\n      const bookData = bookDoc.data();\n      return bookData.favoritedBy && bookData.favoritedBy.includes(userId);\n    }\n    return false;\n  } catch (error) {\n    console.error('Erro ao verificar favoritos:', error);\n    throw error;\n  }\n}\n\n// Buscar livros favoritos do usuário\nexport async function getUserFavorites(userId) {\n  try {\n    const q = query(booksCollection, where('favoritedBy', 'array-contains', userId));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('Erro ao buscar favoritos do usuário:', error);\n    throw error;\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}